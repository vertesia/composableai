import { activityInfo, log } from "@temporalio/activity";
import { ApplicationFailure } from "@temporalio/workflow";
import { VertesiaClient } from "@vertesia/client";
import { NodeStreamSource } from "@vertesia/client/node";
import mime from "mime";
import { basename } from "path";
import { Readable } from "stream";
import { fetchBlobAsBuffer } from "../utils/blobs.js";


export const agentStoragePath = (runId: string) => `agents/${runId}`;

/**
 *
 * Save an artifact generated by an agent to cloud storage
 *
 * @param client
 * @param name
 * @param fileContent
 * @param mimeType
 * @returns
 */
export async function saveAgentArtifact(
    client: VertesiaClient,
    name: string,
    fileContent: Readable,
    mimeType: string = "application/json",
) {
    const { runId } = activityInfo().workflowExecution;
    const ext = mime.getExtension(mimeType);
    if (!name) {
        throw ApplicationFailure.nonRetryable(`Name is required`);
    }

    //create the file path and append extension if needed
    const filePath = agentStoragePath(runId) + "/" + name + (ext && !name.endsWith(ext) ? "." + ext : "");
    log.info(`Storing agent artifact ${filePath} for run ${runId}`);

    try {
        const source = new NodeStreamSource(fileContent, `${runId}-${basename(filePath)}`, mimeType, filePath);
        return await client.files.uploadFile(source);
    } catch (err: any) {
        log.error(`Failed to save agent artifact for run ${runId}`, {
            err,
            file: filePath,
        });
        throw ApplicationFailure.nonRetryable(
            `Failed to save agent artifact for run ${runId}`,
            "SaveAgentArtifactError",
            {
                error: err,
            },
        );
    }
}

export async function fetchAgentArtifact(client: VertesiaClient, name: string) {
    const { runId } = activityInfo().workflowExecution;
    const filePath = agentStoragePath(runId) + "/" + name;
    return fetchBlobAsBuffer(client, filePath);
}
